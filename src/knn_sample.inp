clear
set verbose off
include knn.gfn

open credscore.gdt --quiet

# Select an example to run
EXAMPLE = 3
# Parameter
scalar N_NEIGHBORS = 5  # no. of neighbors

if EXAMPLE == 1  # regression
    list x = Age MDR OwnRent
    series y = Income

elif EXAMPLE == 2  # classification with majority voting
    list x = Age Income
    series y = Acc
    setinfo y --discrete

elif EXAMPLE == 3  # classification with probability predictions
    list x = Age Income
    series y = Acc
    setinfo y --discrete
    bundle Params = _(class_prediction = "probability",
                      distance_type = "manhatten")
endif

# Remove missing values and define training set
smpl y x --no-missing --permanent
genr index
series trainset = (index <= 50) ? TRUE : FALSE

# Activate training set
smpl trainset == TRUE --restrict

# Euclidean distance (default)
# ============================
if exists(Params)
    bundle Model = knn_fit(y, x, N_NEIGHBORS, Params)
else
    bundle Model = knn_fit(y, x, N_NEIGHBORS)
endif

knn_summary(Model)  # Print summary of estimation
stop

series yhat = Model.yhat
series uhat = Model.uhat

if EXAMPLE == 1
    series diagonal = y
    gnuplot yhat diagonal y --with-lines=diagonal --output=display \
      {set yrange[0:10]; set xrange[0:10];}

    freq uhat --normal --plot=display

elif EXAMPLE == 2
    if Model.class_prediction == "majority"
        gnuplot Age Avgexp yhat --dummy --output=display --fit=none
    endif
endif

# In-sample scores
print knn_scores(y, yhat, Model)

# Activate testset and predict out-of-sample
smpl trainset == FALSE --restrict --replace
series prediction = knn_predict(Model, x)
# Out-of-sample scores
print knn_scores(y, prediction, Model)
print y prediction -o --range=:10

stop



/*
# Determine the optimal number of cluster by means of a screeplot
# ===============================================================
scalar max_clusters = 5
matrix inertia = seq(2, max_clusters)' ~ mshape(NA, max_clusters - 1, 1)
cnameset(inertia, "n_clusters inertia")

loop i=2..max_clusters
    bundle Model = knn_fit(x, $i)
    inertia[i-1, 2] = Model.within_variation_total
endloop

gnuplot 2 1 --matrix=inertia --with-lines --output=display \
    {set title 'Scree plot showing inertia as a function of no. of clusters'; }
*/

