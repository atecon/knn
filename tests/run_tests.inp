clear
set verbose off
set assert stop

include "./src/knn.inp" --force
include CvDataSplitter.gfn
include extra.gfn
include FEP.gfn


##### Regression + no CV + single neighbor
# Open dataset etc.
open credscore.gdt --quiet
genr index
# Parameters
matrix N_NEIGHBORS = 3
list x = Age Selfempl OwnRent
series y = Income
smpl index <= 50 --restrict
bundle Model = knn_fit(y, x, N_NEIGHBORS)
print Model.rsq
print Model.ess
knn_summary(Model)
knn_plot_score(Model)
matrix yhat = {y} ~ Model.yhat
matrix uhat = Model.uhat
print yhat uhat -o --range=:5
smpl index > 50 --restrict --replace
series pred = knn_predict(Model, x)
print x pred --byobs --range=:5


##### Regression + no CV but estimation for different no. of neighbors
##### In this case, prediction is not possible (run CV before)
# Open dataset etc.
open credscore.gdt --quiet
genr index
# Parameters
matrix N_NEIGHBORS = seq(1, 3)
list x = Age Selfempl OwnRent
series y = Income
smpl index <= 50 --restrict
bundle Model = knn_fit(y, x, N_NEIGHBORS)
print Model.rsq
print Model.ess
knn_summary(Model)
knn_plot_score(Model)
matrix yhat = {y} ~ Model.yhat
matrix uhat = Model.uhat
print yhat uhat -o --range=:5

##### Cross-validation for regression using "loo" strategy for a single neigbor
##### prediction is possible
open credscore.gdt --quiet
genr index
# Set parameters
N_NEIGHBORS = 1
string SPLITTERS = "loo"  # either "kfold", "loo"
bundle Params = _(splitters = SPLITTERS)
# Select features and target
list x = Age Selfempl OwnRent
series y = Income
smpl index <= 50 --restrict
# Fit the model
bundle Model = knn_fit(y, x, N_NEIGHBORS, Params)
print Model
knn_summary(Model)
Scores = Model.Scores  # nelme(array) == no. of Ks passed to knn_fit
# knn_plot_score(Model)  # errors
knn_plot_cvscores(Model)
assert(nelem(Scores) == nelem(N_NEIGHBORS))
assert(rows(Scores[1]) == $nobs)
smpl index > 50 --restrict --replace
series pred = knn_predict(Model, x)
print x pred --byobs --range=:5


##### Cross-validation for regression using "kfold" strategy
##### evaluating multiple neighbors
open credscore.gdt --quiet
genr index
# Set parameters
N_NEIGHBORS = seq(1, 3)
scalar KFOLD_NSPLITS = 5
string SPLITTERS = "kfold"  # either "kfold", "loo"
bundle Params = _(splitters = SPLITTERS, kfold_nsplits = KFOLD_NSPLITS)
# Select features and target
list x = Age Selfempl OwnRent
series y = Income
# Fit the model
bundle Model = knn_fit(y, x, N_NEIGHBORS, Params)
knn_summary(Model)
print Model
Scores = Model.Scores  # nelme(array) == no. of Ks passed to knn_fit
knn_plot_score(Model)
knn_plot_cvscores(Model)
assert(nelem(Scores) == nelem(N_NEIGHBORS))
assert(rows(Scores[1]) == KFOLD_NSPLITS)


##### Cross-validation for regression using "recwin" strategy for time-series
open denmark.gdt --quiet
# Set parameters
N_NEIGHBORS = 3
scalar WIN_SIZE = 32
string SPLITTERS = "recwin"  # either "kfold", "loo"
bundle Params = _(splitters = SPLITTERS, win_size = WIN_SIZE)
# Select features and target
list x = ldiff(LRY) diff(IBO)
series y = ldiff(LRM)
smpl y x --no-missing
# Fit the model
bundle Model = knn_fit(y, x, N_NEIGHBORS, Params)
print Model
knn_summary(Model)
Scores = Model.Scores
matrix scores = Scores[1]
knn_plot_cvscores(Model)


##### Cross-validation for regression using "kfold" strategy
##### plus various no. of neighbors
open credscore.gdt --quiet
genr index
# Set parameters
matrix N_NEIGHBORS = seq(1, 10)
scalar KFOLD_NSPLITS = 5
string SPLITTERS = "kfold"  # either "kfold", "loo"
string METRIC = "mae"
bundle Params = _(splitters = SPLITTERS, kfold_nsplits = KFOLD_NSPLITS,
                  scoring_regression = METRIC)
# Select features and target
list x = Age Selfempl OwnRent
series y = Income
# Fit the model
bundle Model = knn_fit(y, x, N_NEIGHBORS, Params)
print Model
knn_summary(Model)
print Model.mean_scores
knn_plot_score(Model)
knn_plot_cvscores(Model)


#####################################
### Multi-class Classification using cross-validation
### Run k-fold with 5 folds sampling
#####################################
open credscore.gdt --quiet
genr index
# Set parameters
matrix NEIGHBORS = seq(1, 3)  # sequence of no. of neighbors to evaluate
scalar KFOLD_NSPLITS = 5  # only relevant for splitters = "kfold"
string SPLITTERS = "kfold"  # only either "kfold", "loo" not supported, yet
string METRIC = "PRC"
bundle Params = _(splitters = SPLITTERS, kfold_nsplits = KFOLD_NSPLITS,
                  scoring_classification = METRIC)
# Select features and target
list x = Income Age Selfempl OwnRent
series y = Age   # 15 classes
# !!!Make sure, the target is recognized as being discrete!!!
setinfo y --discrete

# Fit the model
bundle Model = knn_fit(y, x, NEIGHBORS, Params)
knn_summary(Model)
knn_plot_score(Model)
knn_plot_cvscores(Model)
print Model.mean_scores
series pred = knn_predict(Model, x)
print x pred --byobs --range=:5




##############
# WBG example
##############

### NO CV + single Neighbor value -> Prediction is possible
open \
  /home/artur/Universit√§t/THB/Kooperationen/WBG/WBG_Datensatz_valide_NA_Werte.xlsx --quiet

varlist
list x = WohnflAche Geschlecht Generation
series y = Wohngebiet
summary y --simple
setinfo y --discrete
smpl obs < 300 --restrict --permanent
# Parameter
scalar N_NEIGHBORS = 3
scalar SHARE_TESTSET = 1/2
# Remove missing values
smpl y x --no-missing --permanent
# Define training set
series rand = randgen(i, 0, 1)
series trainset = (rand >= SHARE_TESTSET) ? TRUE : FALSE
smpl trainset == TRUE --restrict --replace
smpl obs < 50 --restrict
bundle Model = knn_fit(y, x, N_NEIGHBORS)
print Model
knn_summary(Model)  # Print summary of estimation

series yhat = Model.yhat
series uhat = Model.uhat
summary y yhat uhat

print knn_scores(y, yhat, Model)
# Testset
smpl trainset == FALSE --restrict --replace
series pred = knn_predict(Model, x)
print y pred -o --range=:5


# With cross-validation
smpl trainset == TRUE --restrict --replace
matrix NEIGHBORS = seq(1, 10)  # sequence of no. of neighbors to evaluate
scalar KFOLD_NSPLITS = 5    # only relevant for splitters = "kfold"
string SPLITTERS = "kfold"  # only either "kfold", "loo" not supported, yet
#string METRIC = "TSS"
bundle Params = _(kfold_nsplits = KFOLD_NSPLITS, splitters = SPLITTERS)
bundle Model = knn_fit(y, x, NEIGHBORS, Params)
knn_summary(Model)
knn_plot_score(Model)
#print Model.Scores[2]
knn_plot_cvscores(Model)

smpl trainset == FALSE --restrict --replace
series pred = knn_predict(Model, x)
series pred_error = y - pred
freq pred_error --plot=display


print "Finished all tests succesfully."
quit
