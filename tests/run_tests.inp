clear
set verbose off
set assert stop

include "./src/knn.inp" --force
include CvDataSplitter.gfn

# Iterate over different values for k
# Parameters
scalar N_NEIGHBORS = 5
matrix neighbors = seq(1, 10)
matrix Scores = {}

/*
open credscore.gdt --quiet --preserve
list x = Age Selfempl OwnRent
series y = Income
# Remove missing values and define training set
smpl y x --no-missing --permanent
genr index
series trainset = (index <= 50) ? TRUE : FALSE

loop i=1..nelem(neighbors)
    print i

    # Training
    smpl trainset == TRUE --restrict --replace
    bundle Model = knn_fit(y, x, neighbors[i])
    print Model

    # Out-of-sample Prognose
    smpl trainset == FALSE --restrict --replace
    series prediction = knn_predict(Model, x)

    # Speicher die scores
    Scores ~= knn_scores(y, prediction, Model)

    smpl full
endloop
Scores
*/



##### CROSS_VALIDATION
open credscore.gdt --quiet --preserve
scalar N_NEIGHBORS = 2
list x = Age #Selfempl OwnRent
series y = Income
genr index
smpl index <= 50 --restrict

# Remove missing values and define training set
bundle Params = _(splitters = "kfold", kfold_nsplits = 2)
bundle Model = knn_fit(y, x, N_NEIGHBORS, Params)
print Model.Scores



print "Finished all tests succesfully."
quit
