clear
set verbose off
set assert stop

include "./src/knn.inp" --force
include CvDataSplitter.gfn

# Iterate over different values for k
# Parameters
scalar N_NEIGHBORS = 5
matrix neighbors = seq(1, 10)
matrix Scores = {}

/*
open credscore.gdt --quiet --preserve
list x = Age Selfempl OwnRent
series y = Income
# Remove missing values and define training set
smpl y x --no-missing --permanent
genr index
series trainset = (index <= 50) ? TRUE : FALSE

loop i=1..nelem(neighbors)
    print i

    # Training
    smpl trainset == TRUE --restrict --replace
    bundle Model = knn_fit(y, x, neighbors[i])
    print Model

    # Out-of-sample Prognose
    smpl trainset == FALSE --restrict --replace
    series prediction = knn_predict(Model, x)

    # Speicher die scores
    Scores ~= knn_scores(y, prediction, Model)

    smpl full
endloop
Scores
*/


##### Cross-validation for regression using "loo" strategy
open credscore.gdt --quiet --preserve
# Set parameters
scalar N_NEIGHBORS = 7
string SPLITTERS = "loo"  # either "kfold", "loo"
bundle Params = _(splitters = SPLITTERS)
# Select features and target
list x = Age Selfempl OwnRent
series y = Income
# Restrict to training set
genr index
smpl index <= 75 --restrict
# Fit the model
bundle Model = knn_fit(y, x, N_NEIGHBORS, Params)
matrix Scores = Model.Scores
assert(rows(Scores) == $nobs)


##### Cross-validation for regression using "kfold" strategy
open credscore.gdt --quiet --preserve
# Set parameters
scalar N_NEIGHBORS = 7
scalar KFOLD_NSPLITS = 2
string SPLITTERS = "kfold"  # either "kfold", "loo"
bundle Params = _(splitters = SPLITTERS, kfold_nsplits = KFOLD_NSPLITS)
# Select features and target
list x = Age Selfempl OwnRent
series y = Income
# Fit the model
bundle Model = knn_fit(y, x, N_NEIGHBORS, Params)
matrix Scores = Model.Scores
assert(rows(Scores) == KFOLD_NSPLITS)


##### Cross-validation for regression using "recwin" strategy for time-series
open denmark.gdt --quiet --preserve
# Set parameters
scalar N_NEIGHBORS = 3
scalar WIN_SIZE = 32
string SPLITTERS = "recwin"  # either "kfold", "loo"
bundle Params = _(splitters = SPLITTERS, win_size = WIN_SIZE)
# Select features and target
list x = ldiff(LRY) diff(IBO)
series y = ldiff(LRM)
smpl y x --no-missing
# Fit the model
bundle Model = knn_fit(y, x, N_NEIGHBORS, Params)
matrix Scores = Model.Scores
print Scores



print "Finished all tests succesfully."
quit
